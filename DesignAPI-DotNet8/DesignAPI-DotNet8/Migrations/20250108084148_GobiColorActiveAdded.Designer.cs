// <auto-generated />
using System;
using DesignAPI_DotNet8.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesignAPI_DotNet8.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250108084148_GobiColorActiveAdded")]
    partial class GobiColorActiveAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.ColorGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ColorGroups", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.ColorShade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ColorShades", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.ColorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ColorTypes", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.DyingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DyingMethods", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.GobiColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColorShadeId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DandruffClassification")
                        .HasColumnType("int");

                    b.Property<int?>("DyingMethodId")
                        .HasColumnType("int");

                    b.Property<string>("FourDigitColorCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("GobiColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("MainFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("PantoneColorCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ColorShadeId");

                    b.HasIndex("ColorTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DyingMethodId");

                    b.HasIndex("GobiColorCode")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PantoneColorCode");

                    b.ToTable("GobiColors", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.GobiColorRecipeHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CamelWool")
                        .HasColumnType("real");

                    b.Property<string>("ColorComposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Cotton")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("GobiColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("GobiColorRecipeDetailIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<float>("NaturalColorI")
                        .HasColumnType("real");

                    b.Property<float>("NaturalColorII")
                        .HasColumnType("real");

                    b.Property<float>("NaturalColorIII")
                        .HasColumnType("real");

                    b.Property<float>("NaturalColorIV")
                        .HasColumnType("real");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SheepWool")
                        .HasColumnType("real");

                    b.Property<float>("Silk")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GobiColorCode")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("GobiColorRecipeHeader", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.PantoneColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColorGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOkForMaterial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOkForStyle")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("PantoneColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PantoneColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RgbHex")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("RgbTriple")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColorGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PantoneColorCode")
                        .IsUnique();

                    b.ToTable("PantoneColors", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Design", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Designers");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.GeneralSetup.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.GobiColor.GobiColorRecipeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("GobiColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GobiColorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PaintType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PaintWeight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GobiColorCode")
                        .IsUnique();

                    b.HasIndex("GobiColorId");

                    b.ToTable("GobiColorRecipeDetail", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("ProductTypeIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DimensionName")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.ToTable("Dimensions", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.GradingHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseSizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DimensionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Increment")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("ProductTypeIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("SizeNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeRangeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Increment")
                        .IsUnique();

                    b.HasIndex("SizeRangeName");

                    b.HasIndex("SizeName", "DimensionTypeId");

                    b.ToTable("GradingHeaders", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.GradingPitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DimensionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Increment")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("Increments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionName");

                    b.HasIndex("Increment")
                        .IsUnique();

                    b.HasIndex("ProductTypeId");

                    b.ToTable("GradingPitches", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.ToleranceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DimensionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tolerance")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("ToleranceMinus")
                        .HasColumnType("real");

                    b.Property<float>("TolerancePlus")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DimensionName");

                    b.HasIndex("Tolerance");

                    b.ToTable("ToleranceDetails", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.ToleranceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("DimensionNames")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Increments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Tolerance")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Tolerance")
                        .IsUnique();

                    b.ToTable("ToleranceHeaders", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.DimensionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DimensionTypes", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DimensionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SkuSizeCode")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DimensionTypeId");

                    b.HasIndex("SizeGroupId");

                    b.HasIndex("SizeName", "DimensionTypeId")
                        .IsUnique();

                    b.HasIndex("SortOrder", "DimensionTypeId")
                        .IsUnique();

                    b.ToTable("Sizes", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.SizeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SizeGroups", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.SizeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseSizeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dimension1TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DimensionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOkForMaterial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOkForSizeChar")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOkForStyle")
                        .HasColumnType("bit");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SizeRangeCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SizeRangeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Dimension1TypeId");

                    b.HasIndex("SizeRangeCategoryId");

                    b.HasIndex("SizeName", "DimensionTypeId");

                    b.ToTable("SizeRange", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.SizeRangeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SizeRangeCategories", (string)null);
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DimensionProductType", b =>
                {
                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.HasKey("DimensionId", "ProductTypesId");

                    b.HasIndex("ProductTypesId");

                    b.ToTable("DimensionProductType");
                });

            modelBuilder.Entity("GradingHeaderProductType", b =>
                {
                    b.Property<int>("GradingHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.HasKey("GradingHeaderId", "ProductTypesId");

                    b.HasIndex("ProductTypesId");

                    b.ToTable("GradingHeaderProductType");
                });

            modelBuilder.Entity("GradingHeaderSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DimensionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SizeName", "DimensionTypeId");

                    b.ToTable("GradingHeaderSize");
                });

            modelBuilder.Entity("ProductTypeSize", b =>
                {
                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypesId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductTypeSize");
                });

            modelBuilder.Entity("ProductTypeSizeRange", b =>
                {
                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int>("SizeRangeId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypesId", "SizeRangeId");

                    b.HasIndex("SizeRangeId");

                    b.ToTable("ProductTypeSizeRange");
                });

            modelBuilder.Entity("SizeRangeSize", b =>
                {
                    b.Property<int>("SizeRangeId")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DimensionTypeId")
                        .HasColumnType("int");

                    b.HasKey("SizeRangeId", "SizeName", "DimensionTypeId");

                    b.HasIndex("SizeName", "DimensionTypeId");

                    b.ToTable("SizeRangeSize");
                });

            modelBuilder.Entity("ToleranceHeaderDimension", b =>
                {
                    b.Property<string>("DimensionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ToleranceHeaderId")
                        .HasColumnType("int");

                    b.HasKey("DimensionName", "ToleranceHeaderId");

                    b.HasIndex("ToleranceHeaderId");

                    b.ToTable("ToleranceHeaderDimension");
                });

            modelBuilder.Entity("ToleranceHeaderGradingHeader", b =>
                {
                    b.Property<string>("Increment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ToleranceHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Increment", "ToleranceHeaderId");

                    b.HasIndex("ToleranceHeaderId");

                    b.ToTable("ToleranceHeaderGradingHeader");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.GobiColor", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Colors.ColorShade", "ColorShade")
                        .WithMany()
                        .HasForeignKey("ColorShadeId");

                    b.HasOne("DesignAPI_DotNet8.Models.Colors.ColorType", "ColorType")
                        .WithMany()
                        .HasForeignKey("ColorTypeId");

                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Colors.DyingMethod", "DyingMethod")
                        .WithMany()
                        .HasForeignKey("DyingMethodId");

                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Colors.PantoneColor", "PantoneColor")
                        .WithMany()
                        .HasForeignKey("PantoneColorCode")
                        .HasPrincipalKey("PantoneColorCode");

                    b.Navigation("ColorShade");

                    b.Navigation("ColorType");

                    b.Navigation("CreatedBy");

                    b.Navigation("DyingMethod");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PantoneColor");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.GobiColorRecipeHeader", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Colors.GobiColor", null)
                        .WithMany("GobiColorRecipeHeaders")
                        .HasForeignKey("GobiColorCode")
                        .HasPrincipalKey("GobiColorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.PantoneColor", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Colors.ColorGroup", "ColorGroup")
                        .WithMany()
                        .HasForeignKey("ColorGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.GeneralSetup.Image", "Image")
                        .WithOne()
                        .HasForeignKey("DesignAPI_DotNet8.Models.Colors.PantoneColor", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("ColorGroup");

                    b.Navigation("CreatedBy");

                    b.Navigation("Image");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.GeneralSetup.Image", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.GobiColor.GobiColorRecipeDetail", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Colors.GobiColorRecipeHeader", null)
                        .WithMany("GobiColorRecipeDetails")
                        .HasForeignKey("GobiColorCode")
                        .HasPrincipalKey("GobiColorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Colors.GobiColor", null)
                        .WithMany("GobiColorRecipeDetails")
                        .HasForeignKey("GobiColorId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.Dimension", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.GeneralSetup.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.GradingHeader", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.SizeRange", "SizeRange")
                        .WithMany()
                        .HasForeignKey("SizeRangeName")
                        .HasPrincipalKey("SizeRangeName");

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.Size", "BaseSize")
                        .WithMany()
                        .HasForeignKey("SizeName", "DimensionTypeId")
                        .HasPrincipalKey("SizeName", "DimensionTypeId");

                    b.Navigation("BaseSize");

                    b.Navigation("CreatedBy");

                    b.Navigation("SizeRange");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.GradingPitch", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.Dimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionName")
                        .HasPrincipalKey("DimensionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Grading.GradingHeader", null)
                        .WithMany("GradingPitches")
                        .HasForeignKey("Increment")
                        .HasPrincipalKey("Increment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("Dimension");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.ToleranceDetail", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.Dimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionName")
                        .HasPrincipalKey("DimensionName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dimension");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.ToleranceHeader", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Grading.ToleranceDetail", "ToleranceDetail")
                        .WithOne()
                        .HasForeignKey("DesignAPI_DotNet8.Models.Grading.ToleranceHeader", "Tolerance")
                        .HasPrincipalKey("DesignAPI_DotNet8.Models.Grading.ToleranceDetail", "DimensionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ToleranceDetail");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.Size", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.DimensionType", "DimensionType")
                        .WithMany()
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.SizeGroup", "SizeGroup")
                        .WithMany()
                        .HasForeignKey("SizeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DimensionType");

                    b.Navigation("SizeGroup");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Sizes.SizeRange", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.DimensionType", "Dimension1Type")
                        .WithMany()
                        .HasForeignKey("Dimension1TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.SizeRangeCategory", "SizeRangeCategory")
                        .WithMany()
                        .HasForeignKey("SizeRangeCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.Size", "BaseSize")
                        .WithMany()
                        .HasForeignKey("SizeName", "DimensionTypeId")
                        .HasPrincipalKey("SizeName", "DimensionTypeId");

                    b.Navigation("BaseSize");

                    b.Navigation("CreatedBy");

                    b.Navigation("Dimension1Type");

                    b.Navigation("SizeRangeCategory");
                });

            modelBuilder.Entity("DimensionProductType", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.ProductType", null)
                        .WithMany()
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GradingHeaderProductType", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.GradingHeader", null)
                        .WithMany()
                        .HasForeignKey("GradingHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.ProductType", null)
                        .WithMany()
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GradingHeaderSize", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.GradingHeader", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.Size", null)
                        .WithMany()
                        .HasForeignKey("SizeName", "DimensionTypeId")
                        .HasPrincipalKey("SizeName", "DimensionTypeId");
                });

            modelBuilder.Entity("ProductTypeSize", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.ProductType", null)
                        .WithMany()
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.Size", null)
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductTypeSizeRange", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.ProductType", null)
                        .WithMany()
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.SizeRange", null)
                        .WithMany()
                        .HasForeignKey("SizeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SizeRangeSize", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.SizeRange", null)
                        .WithMany()
                        .HasForeignKey("SizeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Sizes.Size", null)
                        .WithMany()
                        .HasForeignKey("SizeName", "DimensionTypeId")
                        .HasPrincipalKey("SizeName", "DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToleranceHeaderDimension", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionName")
                        .HasPrincipalKey("DimensionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Grading.ToleranceHeader", null)
                        .WithMany()
                        .HasForeignKey("ToleranceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToleranceHeaderGradingHeader", b =>
                {
                    b.HasOne("DesignAPI_DotNet8.Models.Grading.GradingHeader", null)
                        .WithMany()
                        .HasForeignKey("Increment")
                        .HasPrincipalKey("Increment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignAPI_DotNet8.Models.Grading.ToleranceHeader", null)
                        .WithMany()
                        .HasForeignKey("ToleranceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.GobiColor", b =>
                {
                    b.Navigation("GobiColorRecipeDetails");

                    b.Navigation("GobiColorRecipeHeaders");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Colors.GobiColorRecipeHeader", b =>
                {
                    b.Navigation("GobiColorRecipeDetails");
                });

            modelBuilder.Entity("DesignAPI_DotNet8.Models.Grading.GradingHeader", b =>
                {
                    b.Navigation("GradingPitches");
                });
#pragma warning restore 612, 618
        }
    }
}
